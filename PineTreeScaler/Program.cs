using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Mutagen.Bethesda.WPF.Reflection.Attributes;

namespace PineTreeScaler
{
    public static class MyExtensions
    {
        public static bool ContainsInsensitive(this string str, string rhs)
        {
            return str.Contains(rhs, StringComparison.OrdinalIgnoreCase);
        }
    }

    public class Settings
    {
        [MaintainOrder]

        [SettingName("Tree Scale Multiplier")]
        [Tooltip("The number by which tree scale will be multiplied")]
        public float TreeScaleMultiplier = 1.2f;
    }

    public class Program
    {

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "PineTreeScaler.esp")
                .Run(args);
        }

        private static readonly string[] treeNamesToAdjust = { "treepineforest01", "treepineforest02", "treepineforest03", "treepineforest04", "treepineforest05" };
        private static Lazy<Settings> _settings = null!;
        private static Settings Settings => _settings.Value;

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var placedObjectGetter in state.LoadOrder.PriorityOrder.PlacedObject().WinningContextOverrides(state.LinkCache))
            {
                var placedObject = placedObjectGetter.Record;
                if (placedObject.Scale == null) continue;
                placedObject.Base.TryResolve<ITreeGetter>(state.LinkCache, out var placedObjectBase);
                if (placedObjectBase == null || placedObjectBase.EditorID == null) continue;
                if (treeNamesToAdjust.Any(placedObjectBase.EditorID.ContainsInsensitive))
                {
                    if (placedObject != null && placedObject.Scale > 0)
                    {
                        IPlacedObject modifiedObject = placedObjectGetter.GetOrAddAsOverride(state.PatchMod);
                        modifiedObject.Scale *= Settings.TreeScaleMultiplier;
                    }
                }
            }
        }
    }
}
